
from flask import Flask, request, jsonify
import logging

app = Flask(__name__)

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Simulated server-side conversion logic
CONVERSION_RATE = 0.000020  # Example conversion rate: 1 fiat = 0.000020 BTC

# Placeholder for a bank account balance (in fiat)
BANK_ACCOUNT_BALANCE = 100000  # Example starting balance: $100,000

# Placeholder for a Bitcoin wallet balance
WALLET_BALANCE = 0  # Example starting balance: 0 BTC

# Default percentage to be converted to Bitcoin
DEFAULT_PERCENTAGE = 0.05

# Merchant's preset conversion percentage (initially set to the default)
merchant_conversion_percentage = DEFAULT_PERCENTAGE

@app.route('/convert', methods=['POST'])
def convert_to_bitcoin():
    """
    Converts a fiat currency amount to Bitcoin.

    Expects a JSON payload with 'amount_fiat' and 'conversion_percentage'.
    """
    try:
        data = request.get_json()
       
        # Validate and extract input data
        amount_fiat = float(data.get('amount_fiat'))
        conversion_percentage = data.get('conversion_percentage', DEFAULT_PERCENTAGE)
       
        # Validate conversion percentage range
        if not 0 <= conversion_percentage <= 1:
            raise ValueError("Conversion percentage must be between 0 and 1.")
       
        # Calculate the total amount to be converted
        total_amount_to_convert = amount_fiat * conversion_percentage
       
        # Deduct the total amount from the bank account
        global BANK_ACCOUNT_BALANCE
        BANK_ACCOUNT_BALANCE -= total_amount_to_convert
       
        # Calculate the amounts to be split between wallet and bank account
        amount_to_wallet = total_amount_to_convert * CONVERSION_RATE
        amount_to_bank_account = amount_fiat - total_amount_to_convert
       
        # Add the converted Bitcoin to the wallet
        global WALLET_BALANCE
        WALLET_BALANCE += amount_to_wallet
       
        # Simulate server response for the conversion
        response = {
            'amount_fiat': amount_fiat,
            'amount_to_wallet': amount_to_wallet,
            'amount_to_bank_account': amount_to_bank_account,
            'conversion_rate': CONVERSION_RATE,
            'merchant_conversion_percentage': conversion_percentage,
            'bank_account_balance': BANK_ACCOUNT_BALANCE,
            'wallet_balance': WALLET_BALANCE
        }

        return jsonify(response), 200

    except (ValueError, TypeError) as e:
        logging.error(f"Invalid input: {e}")
        return jsonify({'error': f'Invalid input: {e}'}), 400

if __name__ == '__main__':
    # Use a production-ready web server like Gunicorn or uWSGI for deployment
    app.run(host='0.0.0.0', port=3000, debug=False)


